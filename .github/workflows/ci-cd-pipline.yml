name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the solution
        run: dotnet build --configuration Release --no-restore

      - name: Publish artifacts
        run: dotnet publish --configuration Release --no-build --output ./artifacts

      - name: Zip artifacts
        run: |
          cd ./artifacts
          zip -r myapp.zip .

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests
        run: dotnet test --no-restore --collect:"XPlat Code Coverage"

      - name: Run code analysis
        run: dotnet tool install --global dotnet-format && dotnet format --verify-no-changes

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (required for GitHub Pages action)
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Build
        run: |
          # Run any build commands if needed
          echo "No additional build steps required for GitHub Pages."

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: Helloworld.cs  

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: failure()

    steps:
      - name: Send failure email
        run: |
          echo "Sending failure email..."
          curl -X POST https://api.sendgrid.com/v3/mail/send \
            -H "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
                  "personalizations": [
                    {
                      "to": [
                        {
                          "email": "gbtdu2@gmail.com"
                        }
                      ],
                      "subject": "Build or Deployment Failed"
                    }
                  ],
                  "from": {
                    "email": "gbtdu2@gmail.com"
                  },
                  "content": [
                    {
                      "type": "text/plain",
                      "value": "A build or deployment has failed on the CI/CD pipeline!"
                    }
                  ]
                }'
